CSS Grid Layout

To tell a container to use grid layout
- display: grid
- causes direct children to become "grid items"

To specify spacing between all cells
- grid-gap: 10px

To specify number of columns and size of each:
- grid-template-columns: 100px 200px 150px
  * three columns of varying sizes
  * using percentages doesn't work well
    because they don't consider grid-gap
  * "fr" (fractional) units do consider grid-gap
    - ex. 1fr to take all the remaining space
      after specified widths and gaps are accounted for
    - 1fr 2fr 1fr gives three columns
      where the free space is distributed between them
      using the numbers are weights
    - can use for column widths and row heights
  * value "auto"
    - means use maximum content size in a column or row
    - smaller elements are expanded to fit the cell size
  * value repeat(3, 150px)
    - creates three columns that are each 150px wide
  * rows are created automatically

To specify number of rows and size of each:
- grid-template-rows: 100px 200px 150px
  * if grid-template-columns is not specified,
    the number of columns defaults to 1
- if there are more items than will fit
  in the specified columns and rows,
  the specified row sizes will repeat to accomodate them
- to specify another size for any implicit rows, add
  grid-auto-rows: {some-height}
  * can specify multiple heights to cycle through

Extra items
- by default are placed on implicit rows
- to switch to use implicit columns,
  grid-auto-flow: column
  * defaults to row
  * similar to flexbox flex-direction
  * when this is set, can specify
    grid-auto-columns: {some-width}
    - can specify multiple widths to cycle through

Tracks
- columns and rows are also referred to as "tracks"
- ones specified by you are "explicit"
- ones not specified by you are "implicit"

Row heights
- default to largest content height in any cell in each row
- setting a height on the container changes this

repeat function
- instead of "20px 20px 20px", can write "repeat(3, 20px)"
- can use with any units (such as fr)
- repeat(2, 20px 40px) is the same as 20px 40px 20px 40px
- repeat can be used anywhere an individual size can be used

Spanning
- to make an item span multiple columns, add to CSS of item
  grid-column: span {n}
- to make an item span multiple rows, add to CSS of item
  grid-row: span {n}

Placing Items
- add to CSS of item
  grid-column-start: {col1}
  grid-column-end: {col2} /* alternative to specifying span */
  * previous two lines can be replaced by
    grid-column: {col1} / {col2}
    or
    grid-column {col1} / span {col2 - col1 + 1}
  grid-row-start: {row1}
  grid-row-end: {row2} /* alternative to specifying span */
  * previous two lines can be replaced by
    grid-row: {row1} / {row2}
    or
    grid-row {row1} / span {row2 - row1 + 1}
- negative values count from end where -1 is the last
  * to span to last column or row
    grid-column: {start-col} / -1;
    - only works if an explicit number of columns is specified
    - otherwise just uses one column
    grid-row: {start-row} / -1;
    - only works if an explicit number of rows is specified
    - otherwise just uses one row

- auto-fill fits as many cells as possible
  * ex. grid-template-columns: repeat(auto-fill, 200px);
    fits as many columns as will fit in the container
    when each has a width of 200px
  * adds extra explicit columns if they will fit
  * doesn't expand items to fill available space
  * resizing the window will reflow the items

- auto-fit is similar to auto-fill
  * doesn't add extra explicit columns
    even if they would fit
  * expands items to fill available space
  * resizing the window will reflow the items

- minmax function
  * can be used for a column width or row height
  * specifies a minimum and maximum size
  * ex. grid-template-column: repeat(auto-fit, minmax(200px, 1fr));

- fit-content function
  * can be used for a column width or row height
  * like auto, but sets a maximum size
  * ex. grid-template-column: fit-content(200px) 300px;

- grid template areas
  * give names to cells
  * can place specific elements in named cells
  * ex.
    grid-template-columns: 300px 1fr 200px
    grid-template-rows: 200px 1fr 100px
    grid-template-areas:
      "header header header"
      "left-nav center right-nav"
      "left-nav center right-nav"
      "footer footer footer"
