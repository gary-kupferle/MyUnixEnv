VimL Notes

Intro
- The programming language used to implemenent Vim plugins
  is called "Vim script", "Vimscript", and "VimL".
  * Having multiple names can make it challenging to
    google for help.
  * It may be helpful to include both "VimL" and "Vimscript" in searches.
  * These notes refer to is as VimL.
- VimL is neither good nor bad, just different than
  the other programming languages you know.
- One of the best sources of information is the
  free, online book "Learn Vimscript the Hard Way"
  at http://learnvimscriptthehardway.stevelosh.com/.
- Builtin help inside Vim is available by entering :help {topic}.
- To get started, create a file named hello.vim.
- Edit this file in Vim and enter the following:
  echo 'Hello, World!'
- To load and execute VimL code in the current buffer,
  enter :source %
- This will display "Hello, World!" in the message area
  below the status line.
- echomsg is similar to echo, but also saves in message history.
- To see the last n messages in message history,
  press :messages or :mes

Style
- see "Google Vimscript Style Guide" at
  https://google.github.io/styleguide/vimscriptguide.xml
- use vint for linting
  * see https://github.com/Kuniwak/vint
  * install with "pip install vim-vint"
  * configure by creating a .vintrc.yaml file in home directory
  * ALE plugin will run vint on .vim files if it is installed
  * can use to lint .vimrc and plugin .vim files

Syntax Overview
- doesn't use statement terminators like ;
- doesn't use block delimiters like { }
  * every statement that supports a block has a corresponding end keyword
  * if ... endif
  * for ... endfor
  * while ... endwhile
  * function ... endfunction
  * can abbreviate end keywords to "end" and the single, next letter
- doesn't use condition delimiters for "if", "for", and "while"
  * ex. if count > 7 ... endif

Miscellaneous
- many VimL commands come from Ex
- syntastic plugin has builtin vimlint support
- to load code in current buffer, source %
- long lines can be split into multiple lines by
  preceding each continuation line with \
- statements are NOT terminated with semicolons
- blocks of code are NOT delimited by curly braces
- most keywords and commands can be abbreviated
  to the shortest, non-ambiguous form
  * ex. function can be shorted to fun
    and endfunction can be shorted to endf
- to get help on a given builtin function,
  :help fn-name()

Variables
- names include letters, digits, and _; cannot start with a digit
- create and modify with
  let {name} = {value}
- destroy with
  unlet {name}
- test for existence with
  if exists('name')
  * note the quotes!
- prefixes affect scope
  none - if inside a function, local to it; otherwise global
  a: - current function argument
  b: - current buffer
  g: - global
  l: - function
  s: - :source'ed Vim script
  t: - current tab page
  v: - global; predefined by Vim
  w: - current window
  &  - option variables
       * set with :set {name} = {value}
  @ - for registers
- to iterate over all the variables in a given scope,
  for example, buffer scope:
  for key in keys(b:)
    echo b:[key]
  endfor

Autocommands
- execute specified commands when a given event occurs in specific files
- syntax: autocmd {event} {file-pattern} {commands}
  * separate multiple commands with |
  * define on multiple lines using \ continuation line prefix
- autocommand groups
  - all autocommands belong to an autocommand group
    * either the default group of the most recently specified group
  - to start a new group, augroup {name}
    * immediately after this, typically want to
      clear all autocommands previously added to this group
      with autocmd!
    * prevents collisions (duplicate definitions)
      if the source file is reloaded
  - to return to the default autocommand group,
    augroup END
    * the name "END" refers to the default group

Buffers
- to get text from current buffer
  * line under cursor: getline('.')
  * line number (1-based) of cursor: line('.')
  * line at a given line number: getline(lineNum)
  * column number (1-based) under cursor: col('.')
  * character under cursor: getline('.')[col('.') - 1]
  * word under cursor: expand('<cword>')
  * first visible line number: line('w0')
  * first visible line number: getline('w0')
  * last visible line number: line('w$')
  * last visible line: getline('w$')
  * last line number in buffer: line('$')
  * last line in buffer: getline('$')
  * first line number selected in visual mode: line('v')
  * only works with single-byte characters
  * for multi-byte, yank into a register (ex. z)
    execute 'normal "zyl'
    let char = getreg('z')
- to append lines (String for 1, List for multiple)
  * after a given line in current buffer,
    call append(line-number, text-or-list)
  * before first line,
    call append(0, text-or-list)
- to test whether a buffer exists, bufexists(buf-name)
- to get the buffer number that contains a given file, bufnr(file-name)
- to get the window number where a buffer is displayed,
  bufwinnr(buf-name)
  * returns -1 if not current displayed in a window
- to open a new split window and display a given buffer number,
  execute 'sbuffer ' . buf-num

Builtin Functions
- for a list of all builtin functions, :help function-list
- for lists of functions in specific groups, use the help commands below
- :help string-functions
- :help list-functions
- :help dict-functions
- :help float-functions
- :help bitwise-functions
- :help var-functions
- :help cursor-functions or :help mark-functions
- :help text-functions
- :help file-functions or :help system-functions
- :help date-functions or :help time-functions
- :help buffer-functions or :help window-functions or :help arg-functions
- :help command-line-functions
- :help quickfix-functions
- :help completion-functions
- :help folding-functions
- :help syntax-functions or :help highlighting-functions
- :help spell-functions
- :help history-functions
- :help interactive-functions
- :help gui-functions
- :help server-functions
- :help window-size-functions
- :help mapping-functions
- :help various-functions
- one way to move the cursor: cursor(line, column)
  * also see getpos() which returns a list
- to prompt the user, echo confirm("is this ok?", "&Yes\n&No")
  * to make "No" the default choice,
    echo confirm("is this ok?", "&Yes\n&No\n&Don't know", 2)

Comments
- single-line comments begin with "
  * can't have another " on the same line
    because that would be a string literal
- no multi-line comment delimiters

Debugging
- to load a script being edited, press <leader>sb (,sb)
  for "source buffer"
- to bail out of code early for debugging, insert "return"
- the equivalent of JavaScript console.log('foo =', foo)
  is echomsg 'foo = ' . foo
- to output the content of a List
  for item in list
    echomsg item
  endfor

Echo
- echo {string} outputs a message in Vim's message area
- echomsg {string} does the same AND saves it in message history
- to convert a non-String value to a String, string(value)
- to see messages in history, :messages
- to clear message history, ???

Events
- for a list of events and descriptions, :help autocommand-events
- reading events
  BufNewFile, BufReadPre, BufRead, BufReadPost, BufReadCmd
  FileReadPre, FileReadPost, FileReadCmd
  StdinReadPre, StdinReadPost
- writing events
  BufWrite, BufWritePre, BufWritePost, BufWriteCmd
  FileWritePre, FileWritePost, FileWriteCmd
  FileAppendPre, FileAppendPost, FileAppendCmd
  FilterWritePre, FilterWritePost
- buffer events
  BufAdd, BufCreate, BufDelete, BufWipeout
  BufFilePre, BufFilePost
  BufEnter, BufLeave, BufWinEnter, BufWinLeave
  BufUnload, BufHidden, BufNew
  SwapExists
- option events
  FileType, Syntax, EncodingChanged, TermChanged
- startup and exit events
  VimEnter, GUIEnter, GUIFailed, TermResponse
  QuitPre, VimLeavePre, VimLeave
- miscellaneous events
  FileChangedShell, FileChangedShellPost, FileChangesRO
  ShellCmdPost, ShellFilterPost
  CmdUndefined, FuncUndefine, SpellFileMissing, SourcePre, SourceCmd
  VimResized, FocusGained, FocusLost
  CursorHold, CursorHoldI, CursorMoved, CursorMovedI
  WinEnter, WinLeave, TabEnter, TabLeave, CmdwinEnter, CmdwinLeave
  InsertEnter, InsertChange, InsertLeave, InsertCharPre
  TextChanged, TextChangedI
  ColorScheme
  RemoteReply
  QuickFixCmdPre, QuickFixCmdPost
  SessionLoadPost
  MenuPopup, CompleteDone
  User

Ex commands
- to execute one, execute {ex-string}
- to execute a string of normal-mode commands, execute "normal! {cmds}"
  * the ! causes default versions of commands to be executed,
    in case the user has remapped them

File Type Detection
- determined by .vim files in .vim/ftdetect
- to detect via file extension
  * example line to define "foo" file type
    autocmd BufRead,BufNewFile *.foo set filetype=foo
- to detect via file content
  * ex. HTML
  if getline(1) =~ '\<html\>'
    set filetype=html
  endif
- to see the file type of the current buffer
  :set filetype?
- to set a buffer so it isn't associated with a file
  and doesn't need to be saved
  :set buftype=nofile
  * useful for buffers that a populated by plugins for display-only purposes

Flow control and loops
- if condition
    ...
  elseif condition
    ...
  else
    ...
  endif
  - condition is NOT surrounded by parens
  - strings that start with digits are coerced to a number
  - strings that do not start with digits are coerced to zero
  - zero is false; all other number values are true
  - to test if a variable is set, if exists('variableName')
- ternary expression
  condition ? true-value : false-value
- while condition
    ...
  endwhile
- for variable in someList
    ...
  endfor
- there is no loop like for i = 0; i < 10; i++

Functions
- has many builtin functions and more can be defined
- to define
  * function! Name()
    endfunction
  * ! lets it override previously defined functions with same name
  * the name must start uppercase
  * to return a value, "return value"
- to call
  * call Name(args)
    - the "call" keyword is not needed when function call is part of an expression
  * can call from command mode (:)
  * another option is to use the call function
    - call(Name, argList)
    - argList can be a literal list
- to refer to a named parameter inside a function,
  prefix name with "a:" to indicate argument scope
- to allow optional arguments, specify ... as last parameter
  * inside a function,
    all arguments are in a List accessed with a:index and
    optional arguments are in a List accessed with a:000[index]
  * List indexes are zero-based

Plugins
- a plugin is defined by files in subdirectories of .vim
  * autoload directory
    - holds files that are loaded on demand
    - provides a way to "namespace" functions
      * if the file autoload/foo.vim defines a foo#bar function,
        call it with
        call foo#bar(args)
      * if the file autoload/foo/bar.vim defines a foo#bar#baz function,
        call it with
        call foo#bar#baz(args)
    - a file isn't loaded until one of its functions is called
      * important for large plugins to reduce
        Vim startup time and memory used initially
  * doc
    - holds plugin documentation files
  * ftdetect
    - holds files that detect the type of a file being edited
  * ftplugin
    - holds files used to process files with a specific type
  * plugin
    - holds plugin files that are loaded when Vim is started
    - great place for utility functions that other plugin files need?
  * syntax
    - holds files that identify syntax elements in files with a specific type
    - used for syntax highlighting
- a plugin doesn't have to have a file in each of these directories
- to install a plugin
  * place files in the appropriate subdirectories of .vim
    or use a plugin manager like Pathogen or Vundle
- runtimepath option holds a list of directories Vim searches for plugin files
  * by default, only contains .vim
  * can add more
    - set runtimepath+=directory
    - restart Vim for change to take effect
  * Pathogen modifies this to include directories under .vim/bundle

Regular Expressions
- pass pattern as a string without slashes; ex. '^foo$/'
- to test whether a string matches
  * can use operators with string to test before and pattern after
    =~  match where case sensitivity depends on user setting
    =~# match case sensitive
    =~? match case insensitive
    !~  match where case sensitivity depends on user setting
    !~# doesn't match case sensitive
    !~? doesn't match case insensitive
  * can  use match(text, pattern)
    - returns index of match or -1 if it doesn't match
- very magic mode \v
- capture groups
  * example
    let pattern = '\vstatic displayName \= ''(.+)'';'
    let result = matchlist(line, pattern)
    let displayName = result[1] " first capture group

Syntax Highlighting
- defined by files in .vim/syntax directory
- defined using "syntax" and "highlight" commands
  * syntax command
    - identifies text that should be associated with a specific syntax group
    - several styles of identifying text are supported
      * in the following examples, JavaScriptKeyword and JavaScriptComment
        are syntax groups
      * keyword - specified by name
        - ex. syntax keyword JavaScriptKeyword yield
      * match - specified by a regex
        - ex. syntax match JavaScriptComment singleLineComment /\/\/.*/
      * region - specified by starting and ending regexes
        - ex. syntax region JavaScriptComment multiLineComment start=/\/\*/ end=/\*\//
          * can also specify text to skip with skip=/pattern/
    - concealing matched text
      * use syntax "conceal" argument to hide matching text
      * use syntax "concealends" argument to hide the start and end text of a region
      * must set conceallevel and concealcursor options
      * conceallevel
        - conceallevel=0 means show
        - conceallevel=1 means display replacement character in its place
          * defaults to space; change with "listchars conceal:c" where c is the replacement character
          * to see current replacement characters, :syn-cchar
        - conceallevel=2 means hide unless a replacement character was specified
          * to see current replacement characters, :syn-cchar
        - conceallevel=3 means hide
        - ex. setlocal conceallevel=3
      * concealcursor
        - concealcursor sets the modes in which the cursor line text can be concealed
          * n for normal
          * i for insert
          * v for visual (applies to all lines in visual area)
          * c for command
        - setting is local to the current window
        - ex. setlocal concealcursor=nivc
  * highlight command
    - map a syntax group to highlighting to be applied
    - to see all current highlight mappings
      * :highlight
    - can specify highlighting for three types of terminals
      * term - terminal Vim with no color support
      * cterm - terminal Vim with color support
      * gui - for GUI/non-terminal Vim implementations (ex. MacVim)
      * value for each is an attribute list
    - can specify styles in a term, cterm, or gui attribute list
      * bold, italic, underline, reverse, inverse, standout, and NONE (to reset)
    - can specify colors
      * using ctermfg, ctermbg, guifg, and guibg
      * using Vim color names, color numbers, or RGB hex values
        - see :help cterm-colors for color numbers and names
          * the asterisk after color numbers means add 8
        - see :help gui-colors
        - color names are case-insensitive
    - in the following example, JavaScriptComment is a syntax group
    - ex. highlight JavaScriptComment ctermfg=green guifg=#00ff00
    - this approach doesn't honor user specified color schemes
      that assign highlighting to language-independent syntax groups
      * ex. Comment instead of JavaScriptComment
      * to link the styling from one syntax group to another
        - higlight link JavaScriptComment Comment

Statusline
- to customize
  set statusline={content}
  * does it need to begin with %?
- can contain special character sequences starting with %
  that are replaced by certain values
  - - left-justify the next item
  < - truncate next item if it's too long (how is this determined?)
  \  - literal space
  b - decimal value of character under cursor
  B - hex value of character under cursor
  c - current cursor column number
  f - path to file being edited
  F - full path to file being edited
  h - [Help] when viewing a Vim help file
  H - ,HLP when viewing a Vim help file
  l - current cursor line number
  m - [+] if current file has been modified and not saved; [-] otherwise
  M - ,+ if current file has been modified and not saved, ,- otherwise
  n - buffer number
  p - percentage of the last visible line number (100 if last line is visible)
  P - not sure how this differs from %p
  q - [Quickfix List] or [Location List] if either of those is being displayed
  r - [RO] if current file is read-only
  R - ,RO if current file is read-only
  t - file name (tail) of file being edited
  y - file type in buffer, ex. [vim]
  Y - file type in buffer, ex. ,VIM
  = - ends left-justified items and begins right-justified items
  -n. - sets next group to occupy n characters
  ( - begins a new group
  ) - ends current group
  #name - starts highlight group with given name
- can contain function calls that are replaced by returned string
  * ex. %!FnName()
  * called every time status line is displayed
- can contain VimL expressions
  * ex. %{some-expr}
  * evaluated every time status line is displayed

System Commands
- to execute a shell command and get its output as a string
  let result = system(command)

Types (6)
- Dictionary (map)
  * unordered collection of key/value pairs
  * literal syntax: {key: value, ...}
  * keys must be Strings or Numbers (automatically converted to Strings)
    - String keys must be surrounded by quotes
  * values can be any type including Dictionary
  * to add a pair of modify an existing value for a key
      myDict[key] = value
  * to get a value for a given key
    myDict[key] or myDict.key
  * to get a value for a given nested key (when value is a Dictionary)
    myDict[key1][key2]
  * to remove a pair, ???
  * to iterate over the keys, ???
- Float
  * to convert a String to a Float, str2float(string)
  * to convert a Float to a Number, float2nr(float)
  * the result of using an arithmetic operator
    on a Float and a Number is a Float
- Funcref
  * reference to a function
  * variable name must start uppercase just like function names
  * can set to a previously defined function with
    let MyRef = function('Name')
  * can call with call MyRef(args)
  * to get name, string(MyRef)
    * returns "function('Name')", so have to parse out name
- List
  * literal syntax: [item0, item1, ...]
  * uses zero-based indexes
  * to get length, len(list)
  * to get item at given index, myList[index]
  * to output all the items in a List
    for item in myList
      echomsg 'item = ' . item
    endfor
  * to assign all items in a List to different variables,
    [v1, v2, v3] = myList
    - # of variables must match # of elements in List!
  * to add item to end, call add(list, item)
  * to set the value at a given index, let list[index] = value
  * to remove item at given index, call remove(list, index)
  * to insert item at given index,
    moving current item at that index to next highest index,
    call insert(list, item, index)
  * to sort a list, call sort(list)
    - properly sorts numbers and strings in ascending order
    - if list contains both numbers and strings,
      strings move to beginning and numbers to end
  * to make a shallow copy of a list,
    let shallow = copy(myList)
  * to make a deep copy of a list,
    let deep = deepcopy(myList)
  * to get a slice of a list,
    let slice = myList[startIndex:endIndex]
    - both indexes are inclusive
    - if startIndex is omitted, it is 0
    - if endIndex is omitted, it is the last index
    - can specify negative values to count from end
      * -1 is index of last item
- Number
  * precede octal literals with zero (0)
  * precede hexadecimal literals zero and x or X (0x)
  * all other numbers are assumed to be decimal
  * preceding a String variable with + converts it to a Number
  * to increment a number variable, let n += 1
  * to decrement a number variable, let n -= 1
- String
  * surround with single (preferred) or double quotes
    - single keeps all characters as-is
      without honoring escape sequences like \n for a newline
    - double honors escape sequences
    - to see the difference, enter these:
      echo 'foo\nbar'
      echo "foo\nbar"
  * special characters like \n need to be
    escaped in single quoted strings (\\n),
    but not in double quoted strings
  * to compare strings
    - case-sensitive: s1 ==# s2
    - case-insensitive: s1 ==? s2
  * in a boolean context, a string are first coerced to number
    - strings that do not start with digits are coerced to zero
    - zero is treated as false and all other numbers are treated as true
    - so code inside "if text" where text does not begin with digits
      will not execute
  * concatenated with dot (.) operator
  * to concatenate to a string variable v,
    let v .= someString
  * to get length, len(string)
  * to convert to all uppercase, toupper(string)
  * to convert to all lowercase, tolower(string)
  * to convert any kind of value to string, string(value)
  * to get a slice of a String,
    let slice = myString[startIndex:endIndex]
    - both indexes are inclusive
    - if startIndex is omitted, it is 0
    - if endIndex is omitted, it is the last index
    - can specify negative values to count from end
      * -1 is index of last item
  * to get the last character,
    myString[-1:-1]
  * to get a substring without the last character,
    for example, to remove a newline character,
    myString[:-2]
  * to split a String into a List of Strings based on a delimiter,
    split(string, delimiter)
- no boolean type
  * use 0 for false and non-zero for true (typically 1)
- to get the type of a variable, type(var)
  * returns a number from 0 to 5
  * 0=Number, 1=String, 2=FuncRef, 3=List, 4=Dictionay, 5=Float
- to test the type of a variable
  * if type(var) == number-above
  or
  * if type(var) == type(example)
    - ex. if type(var) == type(1.0) " if Number

Operators
- arithmetic
  * +, -, *, /, % (mod)
- assignment
  * must start with "let" keyword!
    - let foo = 'bar', not foo = 'bar'
  * =, +=, -=, .= (string concatenate and assign)
  * no *=, /=, or %= ?
- logical
  * && (and), || (or), ! (not)
- relational
  * ==, !=, <, <=, =>, >
  * when comparing strings,
    == depends on user setting of ignorecase option
    - to force case-sensitive comparison, use ==#
    - to force case-insensitive comparison, use ==?

Options
- to see value, echo &{name}
  * when & is omitted it looks for a variable
- to set a global value
  * set {name}={value}
    - value must be a literal
  or
  * let &{name} = {value}
    - value can be a variable or function call
- to set a local value (only for current window)
  * setlocal {name}={value}
    - value must be a literal
  or
  * let &l:{name} = {value}

Registers
- to set, let @{letter} = {value}
- to see value, echo @{name}
- when text is yanked without specifying a register,
  it goes to the unnamed register "

System commands
- a.k.a. shell commands
- to run, shell(cmd)
  * returns output as a String

User commands
- must start with uppercase letter
- they call built-in commands
- to define a command that calls a function
  command CmdName call FnName()
  * to invoke the command
    :CmdName
- if command needs to pass n arguments to a function
  command -nargs=n CmdName call FnName(<args>)
  * to invoke the command
    :CmdName arg1 arg2 ...
  * <args> is replaced by the arguments
  * to replace all command-line arguments (space-separated)
    with a single, quoted string containing all the values,
    use <q-args> instead of <args>
- to overwrite a previously defined command,
  use command! instead of command
- to determine if a given command Foo exists,
  if (exists(':Foo')) ...
- to make a command local to buffers with a specific file type,
  define the command in an ftplugin file for the file type
  and include the -buffer option
  * ex. command -buffer ...

Variables
- to declare, let foo
- to declare and set, let foo = 'bar'
- to declare and set multiple variables,
  let [var1, var2, ...] = [val1, val2, ...]
  * must have same number of variables and values
  * RHS can be a List
- to set a buffer local variable
  let b:{name} = {value}
- scope prefixes
  a: argument
  g: global
  l: local to a function
  s: script
  b: buffer
  w: window
- if no scope prefix is used,
  the default scope is local inside functions
  and global otherwise

Windows
- to open a new window and move to it, execute 'new'
- to open a new window that displays a given file,
  and move to it, execute 'new file-path'
