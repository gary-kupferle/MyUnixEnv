Vim Notes
- in HTML, can use after an element name to see possible attribute

Installing Plugins
- see instructions under "Ruby Support" that describe using Pathogen
  * definitely the way to manage plugins!
- to see list of plugins that were successfully installed,
  :scriptnames
- see "Submodules" section in GitNotes.txt
  * describes how you want to add Vim plugin Git repos
  * example
    - cd ~/MyUnixEnv
    - git submodule add https://github.com/wincent/Command-T.git .vim/bundle/command-t

Starting
- vim [filename]          - to start in a specified file
- vim +E                  - to start in file explorer
- vim .                   - same as vim +E
- vim --remote {filename} - to edit file in existing vim session

Help
- for help on any topic, :help {topic} or :h {topic}
- for general help, :help user-manual
- for help on version 7 features, :help version7
- to navigate a link in the help, position the cursor over the link
  and press ctrl-]
- to return to the previous page, press ctrl-t

Configuration is specified in
- _vimrc under Windows (in your C:\VIM directory)
- .vimrc under Unix (in ~)

---

Installing Vim from source
- download and unzip source
- ./configure --enable-rubyinterp
  * Ruby is needed by some plugins such as Command-T
- make install

Installing Vim 7 under Windows
- download gvim70d.exe from ftp://ftp.vim.org/pub/vim/unstable/pc
- double-click the .exe file
- for better Ruby support,
  * add the following to C:\Vim\_vimrc
    autocmd FileType ruby,eruby
    set omnifunc=rubycomplete#Complete
  * from a command prompt, run "gem install vim-ruby
  * download rubycomplete.vim from
    http://blog.hasno.info/blog/segfault/dev/2006/04/10/
    vim-7-ruby-omni-completion.html
    into C:\Vim\vim70d\autoload

--- Alphabetized topics start here

Argument List
- initially set to expanded list of files passed to vim from command-line
  * ex. vim **/*.js **/*.css
- repopulate with :args {list}
  where list is space-separated and can contain wildcards
  and ** to recurse into subdiretories
  * ex. :args **/*.js **/*.css
- to run an ex command on each file, :argdo {command}
  * can specify multiple commands separated by |
- :next or :previous to jump to next or previous file
- :last or :first/:rewind to jump to last or first file

Bash
- To use vi keystrokes for bash command-line editing,
  set -o vi

Build under Linux
- download source from http://www.vim.org
- bunzip2 vim-6.3.tar.bz2
- ./configure
- make GUI=yes
- make install (as root)
- to run GUI version, enter "gvim"

Buffers
  ctrl-^               - switch to previous buffer
  :bn[ext]             - switch to next buffer
  :bp[rev]             - switch to previous buffer
  :ls                  - list buffers (same as :buffers)
		buffer characteristic indicators include: 
    % - buffer in current window
    # - alternate buffer for ":e #" and CTRL-^
    a - active buffer: it is loaded and visible
    h - hidden buffer: loaded, but not displayed in a window
    = - readonly buffer
    + - modified buffer
    x - buffer with read errors
  :b{buffer-number} - to switch to the indicated buffer
  :b {name-fragment} - to switch to the indicated buffer
    Tab completion can be used to cycle through all the buffers
    whose file path contains the text.
    Very cool!
  :bd[{buffer-number}] - to delete the indicated buffer
    If buffer-number is omitted, currently displyed buffer is deleted.
    Multiple buffer numbers can be specified, separated by spaces.
    This really just marks the buffer as unlisted.
    To see it, use :ls!.
  :bw[{buffer-number}] - to wipeout the indicated buffer
    Unlike :bd, this completely deletes the buffer.
 
BufExplorer plugin
- see https://github.com/vim-scripts/bufexplorer.zip
- works with MacVim
- installing using Pathogen
  * cd .vim/bundle
  * git clone https://github.com/vim-scripts/bufexplorer.zip.git
    - alternative you use: see "Installing Plugins" at top of this file
  * restart Vim
- using
  * \be for open in current pane
  * \bs for horizontal split open
  * \bv for vertical split open
  * use j and k keys to move up and down to highlight a buffer
  * press return to open highlighted buffer
  * press F1 for help on other command keys used in this mode

Change (delete and enter insert mode)
  c  - change selection (deletes selected text)
  cc - change line (deletes current line)
  cw - change word (deletes word under cursor)
  c$ - change from cursor to end of line
  C  - same as c$
  s  - substitute characters (can precede with # of characters)
       and enter insert mode
  c/{text}Enter - change all characters from cursor to given text

Code Indenting
- put "filetype indent plugin on" in .vimrc to use filetype-dependent
  settings specified in files in the .vim/ftplugin directory
- settings in these files will override settings in your .vimrc
- for example, create .vim/ftplugin/java.vim containing
  set shiftwidth=4
  set tabstop=4
- options
  :set cindent        - for indenting source code
                        (requires "filetype indent on" in .vimrc)
  :set shiftwidth={#} - sets number of spaces used for indentation
  :set sw={#}         - same as above
  :set cinoptions=(1s - to indent continuation lines with an open paren
                        by one shiftwidth
                        (see :help cinoptions-values for more options
                         and a list of the defaults)
- commands
  ==                  - fixes indentation of current line or selected lines
  =                   - fixes indentation of selected lines
  >                   - indents selected lines
  >>                  - indents current line
  <                   - outdents selected lines
  <<                  - outdents current line
  gg=G                - goes to first line then reindents entire file

Color Schemes
- now using Solarized color theme
- see Syntax...Highlight Test in GVim
- put "syntax enable" in .vimrc to enable colors.
- :hi - to see all the current syntax colors
- color numbers (Are these standard?)
  0 = gray
  1 = red
  2 = green
  3 = yellow
  4 = blue
  5 = magenta
  6 = cyan
  7 = white
- standard color names (case insensitive)
    white, lightgray, gray, darkgray, black,
    red, green, yellow, blue, magenta, cyan
    above preceded by "light" or "dark"
    lightpink, pink, orange, darkorange, purple
- save color scheme .vim files in
    ~/.vim/colors for Unix
    $VIM_HOME/vimfiles/colors for Windows
    Also look in /usr/share/vim/vim72/colors.
- find valid color names in /usr/X11R6/lib/X11/rgb.txt.
- to change to a named color scheme defined in a .vim file
  stored in the appropriate colors directory ...
  :colo[rscheme] {name} - use color scheme from file {name}.vim
  For example, :colo evening
  To cycle through all the installed color schemes,
  enter ":colorscheme " and then continually press Tab.
  To see all the installed color schemes,
  enter ":colo " and press ctrl-d.
- font styles
    bold, italic, underline, reverse, standout, NONE (to reset)
- font names
    default is FixedSys
    set with font attribute
    ex. hi Comment font=Courier
- examples of changing individual colors
  :hi Normal guifg=black guibg=white
  :hi comment ctermfg=blue - when using a terminal window
  :hi comment guifg=blue - when using a GUI
  :hi Search ctermfg=white ctermbg=red
  :hi LineNr ctermfg=0 - to display line numbers in gray
- can also set ctermbg and guibg
- recommendations
  hi Normal font=Fixedsys ctermfg=black ctermbg=white guifg=black guibg=white
  hi Comment ctermfg=darkgray guifg=darkgray
  hi Constant ctermfg=darkgreen guifg=darkgreen
  hi Define ctermfg=magenta guifg=magenta
  hi Fold ctermfg=0 ctermbg=1 " gray on red
  hi Identifier ctermfg=blue guifg=blue
  hi IncSearch ctermfg=white ctermbg=gray
  hi LineNr ctermfg=gray guifg=gray
  hi Search cterm=reverse ctermfg=3 ctermbg=1 \
            gui=reverse guifg=yellow guibg=red
  hi Special ctermfg=5 guifg=orange
  hi Statement ctermfg=blue guifg=blue
  hi Todo ctermfg=3 - to display TODO in comments in yellow
  hi Type ctermfg=red guifg=red

Comments in .vimrc file
- precede with " character

Compiling code
- see :help quickfix.txt

Completion after :
  tab - to complete a command name, file path, ...
    - To cycle through possible matches, keep pressing tab.
  ctrl-d - display list of all possible matches

Completion in insert mode
  ctrl-n - cycle to next matching word and substitute it
  ctrl-p - cycle to previous matching word and substitute it
  These consider all words in all open buffers.

  To select word under cursor in list,
  just continue typing (ex. space).

  Can also use up and down arrow keys to navigate list,
  but must press return key to substitute a word.

  Can enable this with tab key using the following line,
  but this conflicts with the snipmate plugin, so don't do it!
  imap <TAB> <C-n>

  To allow filtering of word list while typing,
  begin a particular form of completion (ex. ctrl-x ctrl-k),
  immediately press ctrl-p, then type.

  To cancel completion without selecting a word, ctrl-e.

  To only consider words in the current buffer, ctrl-x ctrl-n.

  For dictionary lookup, ctrl-x ctrl-k.
  Configure location of dictionary file in .vimrc
  with set dictionary={file-path}.

  For thesaurus lookup, ctrl-x ctrl-t.
  Configure location of thesaurus file in .vimrc
  with set thesaurus={file-path}.

  For filename completion of files in current working directory,
  ctrl-x ctrl-f.
  It's not necessary to type anything before invoking this.
  See "Working Directory" section to commands to see and change it.
  Use ctrl-n and ctrl-p to navigate the list.
  If on a directory, press ctrl-x ctrl-f again to navigate into it.

  Also see section on Omni-completion.

Copy (yank)
  y  - yank (copy) selection
  yw - yank (copy) word (cursor position to end of work)
  yiw - yank (copy) word (under cursor)
  yy - yank (copy) current line
  Y  - same as yy

Counts
- most commands can be preceded by a number that indicates
  how many times the command should be executed.

CtrlP plugin
- fuzzy search for file paths, filenames, and
  most recently used (mru) files
- similar to Command-T plugin, but faster
  and doesn't depend on Ruby support
- :h ctrlp-commands
- :h ctrlp-mappings
- you mapped ctrl-p to this
  * let g:ctrlp_map = '<c-p>'
  * let g:ctrlp_cmd = 'CtrlP .' " note dot to start in current directory
- first time ctrl-p is pressed, will index files (takes a few seconds)
- after pressing ctrl-p
  * press ctrl-f to cycle through modes (files, buffers, mru files)
  * press ctrl-d to toggle between full path and filename-only search
    - stays in selected mode until you change it
  * press ctrl-r to toggle between string and regex mode
  * type characters to match in file paths or names depending on mode
  * use ctrl-j and ctrl-k to navigate list
  * to open file under cursor
    - press enter to open in current window
    - press ctrl-v to open in new vertical split
    - press ctrl-s to open in new horizontal split
  * to close without selecting a file, press esc or ctrl-c

Delete
  d  - delete selection
  dd - delete current line
  dw - delete word under cursor or
       whitespace from cursor to next non-whitespace
  d$ - delete from cursor to end of line
  D  - same as d$
  x  - delete character under cursor or visual selection
  d/{text}Enter - delete all characters from cursor to given text
  To delete without affecting the clipboard, preceded command with "_
  which sends the deleted content to the "blackhole" register.
  For example, "_dd.

Diffs
  There are many ways to use this.  One way is as follows.
  - open first file
  - ":sp" to split the window
  - open second file in second window
  - ":diffthis" in both buffers
  - "]c" to move to next difference
  - "[c" to move to previous difference
  - ":set nodiff" to turn off diff in the current buffer
  - ":set noscrollbind" to turn off coordinated scrolling
    in the current buffer
  There must be an easier way to turn this off!
  Supposedly it's much better in Vim 7 which isn't stable yet.
  
Exploring
  :E[xplore] [start-path]  - open explorer in current window
  :S[explore] [start-path] - open explorer in split window
  Once in explorer window,
  ?         - toggles display of help on keys to use in explorer
  Enter key - opens file/directory under cursor in explorer 
  o         - opens file/directory in new window, leaving explorer displayed
  -         - goes up to parent directory
  i         - toggles display of file sizes and modification dates
  D         - delete file
  R         - rename file

Filtering Lines
- to pass a range of lines to a shell command,
  select the lines using V, type ! and then a shell command
- selected lines will be replaced by the command output
- for example, to sort imports at the top of a Java source file,
  select them and enter "!sort"
  * requires shell sort command (not in Windows)

Folding
- to configure folding of javadoc comments, add this to .vimrc.
  autocmd FileType java :set fmr=/**,*/ fdm=marker fdc=1
- commands to control folding include
  zfap - create a new fold
  zr - reduce/open all folds one level deep
  zR - recursive version of zr (all levels)
  zm - fold more; close all folds
  zM - recursive version of zm (all levels)
  zo - open fold under cursor
  zc - close fold under cursor
  zf - fold selected lines
  zj - move to next fold
  zk - move to previous fold
  zd - delete fold, not content of it
  zE - delete all folds, not their content

Fonts
- example
  :set guifont=Monaco:h14

Fugitive
- for issuing Git commands from inside Vim
- :help fugitive
- all commands start with "G"
- can run any Git command with ":Git {command}
- provides auto-completion of repository paths
- % refers to the current file
  * ex. :Git add % and :Git mv % {new-path}
- many shorthand commands for common operations
  that also interact with the current Vim buffer
  * :Git checkout % to revert a file
    can be performed with :Gread
  * :Git add % to stage a file
    can be performed with :Gwrite
  * :Git mv % {new-path} to move a file
    can be performed with :Gmove {new-path}
  * :Git rm % to remove a file
    can be performed with :Gremove
  * :Git commit -av to commit modified files
    can be performed with :Gcommit -av
    and commit comments can be entered in a split window
  * :Git blame to see who last modified each line in a file
    can be performed with :Gblame
  * :Git status to see files that have been added or modified
    can be performed with :Gstatus
    - use ctrl-n and ctrl-p to move to next and previous file
    - to stage or unstage file on current line, press "-"
    - to view file on current line, press enter key
  * :Git diff to see differences in current file
    can be performed with :Gdiff
    - committed version is on left and uncommitted version is on right
    - added lines are green
    - removed lines are red
    - when run on a file containing merge conflict markers,
      a three-way merge with three vertical splits is presented
    - the target file (2) is on the left
    - the merge file (3) is on the right
    - the file with conflict markers (1) is in the center
    - position cursone on a conflict in center split
    - to keep changes from target (left) enter :diffget //2 | diffup
    - to keep changes from merge (right) enter :diffget //3 | diffup
    - the diffup command in the previous two lines
      updates diff highlighting of the buffers
      and can be run separately with :diffupdate
    - to jump to next changeset, press ]c
    - to jump to previous changeset, press [c
    - when finished resolving conflicts
      * make sure cursor is in center window
      * enter ":only" to close the target and merge windows
      * :Gcommit -av
- relative paths passed to commands
  * paths that start with / are relative to the repository root directory
  * other paths are relative to the current file directory

grep (also see vimgrep)
- searches files in and below current directory (faster than vimgrep)
- uses an external shell command
  * grep by default which doesn't include column numbers in output
    so cursor can't move to the column of the match
  * can configure to use another command like ack or "The Silver Searcher"
    - see "Silver Searcher" section
- :gr[ep] [options] {pattern} {files}
  * -i option makes case-insensitive
  * pattern can be a regex surrounded by /'s
  * files can use * wildcard to match zero or more characters
  * files can use ** to recursively search subdirectories
  * populates quickfix list
    - use :lgr[ep] to populate location list instead
    - can use unimpaired plugin key mappings to navigate
  * ex. gr parseInt **/*.js

HTML Output
- to write a source file out as HTML,
  including color-coded syntax highlighting,
  run :TOhtml.

Key Definitions - FINISH THIS!  SEE KEYNOTE FILE!
- to show current key mappings,

- To define a key for insert mode,
  imap 

- To map a key to run a command
  map <{key}> :{command}<CR>
  * ex. map <F5> :CoffeeRun<CR>

Keyboard Macros
- macros are saved across editing sessions
  q{letter} - to start recording macro {letter}
  q         - to stop recording
  @{letter} - to call macro {letter}
  @@        - to call the last executed macro again

Leader Key
- first key pressed to invoke many plugin commands
- defaults to \

Location List (also see Quickfix List)
- like quickfix list, but is associated with the current window
  and each window can have its own
- uses same commands, but prefixed with "l" instead of "c"

Marks
- to set, :ma[rk] {letter}
- to visit, `{letter}

Modes
  a      - enter insert mode after cursor
  A      - enter insert mode at end of current line
  i      - enter insert mode before cursor
  I      - enter insert mode at start of current line
  o      - "open" new line after current one and enter insert mode
  O      - "open" new line before current one and enter insert mode
  r      - replace char under cursor with next char typed
           but don't enter insert mode
  R      - enter replace mode (overstrike) at cursor;
           every char typed replaces one under cursor
  Esc    - exit current mode and return to command mode
  ctrl-[ - same as Esc

Moving Around
  gg       - beginning of file
  G        - end of file
  ctrl-f   - forward one page
  ctrl-b   - backward one page
  ctrl-d   - forward half page
  ctrl-u   - backward half page
  H        - highest (top) line in window
  L        - lowest (bottom) in window
  zt       - move current line to top of window (z Enter also)
  zb       - move current line to bottom of window
  {        - backward one paragraph
  }        - forward one paragraph
  (        - backward one sentence
  )        - forward one sentence
  0        - beginning of line
  ^        - first non-blank char in line
  $        - end of line
  e        - end of next word
  w        - forward to beginning of next word
  b        - backward to beginning of previous word
  {count}G - line number {count}
  arrows   - one char or line at a time;
             must hold shift key when in visual mode if "behave mswin"
  h        - move left one char
  l        - move right one char
  j        - move down one line
  k        - move up one line
  f{char}  - forward to next occurrence of {char}
  F{char}  - backward to previous occurrence of {char}
  t{char}  - forward to just before next occurrence of {char}
  T{char}  - backward to just before previous occurrence of {char}

NERD_Tree plugin
- tried it, but like using built-in netrw better

Omni-completion
- similar to intellisense in some IDEs
- Vim ships with support for several languages
  including HTML, CSS, JavaScript, PHP, Ruby, and SQL.
- to get a list of possible completions, press ctrl-x ctrl-o
- like other kinds of completion,
  navigate the ist with ctrl-n and ctrl-p
- when the desired completion is under the cursor, just continue typing
- in HTML, can use after an element name to see possible attribute
- in CSS, can use after a property name to see possible values

Opening, Saving and Quiting
  :e {name} - edit file {name}; file is created if it doesn't exist
              Can use FTP to edit remote files.  For example,
              :e ftp://www.ociweb.com/index.html
              Can use scp to edit remote files.  For example,
              :e scp://volkmanm@xi/BAE/JSFTacan/
                 branches/dev-branch/test/vector/baevector.h
              (will prompt for username/password;
               didn't seem to write changes back!)
  :e        - reload the current file (useful if modified outside vim)
  :r {name} - insert content of file {name} after cursor
  :w        - write (save)
  :q        - quit current window unless changed
  :q!       - quit current window and discard changes
  :qall     - quit all windows
  :wq       - write and quit
  :x        - same as :wq, but only writes if changed
  ZZ        - same as :x
  ctrl-s    - saves changes regardless of mode (same as :update)
    This is a problem under Unix because it pauses execution!
    Press ctrl-Q to resume.

Options
- one way to view and set options is to enter ":options:"
  * opens a window that displays all the options,
    provides a description of each, and shows the current value

Paste
  p  - paste after cursor
  P  - paste before cursor
  ]p - paste with indentation adjustment (for source code)
  * To paste text from another application
    that may contain comment delimiters
    - :set paste!
    - cmd-v (without being in insert mode)
    - :set paste!

Pathogen
- better way to install Vim plugins
- also consider Vundle

Quickfix List (also see Location List)
- list of records containing filename, line number, and optional column number
- typically produced by a compiler or linter
  * ex. :!jshint
  * automatically updated as issues are fixed (at least with jshint)
- many tools that populate the quickfix list do not open it
  and automatically jump to location of first record
- to skip to the next or previous record location, :cn[ext] or :cp[revious]
- to skip to the first or last record location, :cfir[st] or :cla[st]
- when list contains references to more than one file,
  it can be useful to skip to those for the next or previous file
  * to skip to first record in next file, :cnfile
  * to skip to last record in previous file, :cnprev
- to view all records, :cope[n]
- to close quickfix list, :ccl[ose]
- you configured <leader>q to toggle viewing quickfix list
- to jump to record reference under cursor, press <cr>
- only one current quickfix list, but others are saved in a stack
  * to switch to the previous one, :colder
  * to switch to the newer one, :cnewer
- recommended plugin: unimpaired (see separate section)

Reflow text in a paragraph
- position cursor anywhere in a paragraph and enter gqap

Registers
- like named clipboards
- hold deleted text that can be pasted
- to place deleted text in a register,
  precede delete or change command with "{register-name} (a-z).
- to paste text from a register,
  precede paste command with "{register-name} (a-z).

Reverse order of all lines
  :g/.*/m0 - for all lines, move it to line zero

Ruby Support
- install Pathogen
  * see https://github.com/tpope/vim-pathogen
- cd ~/.vim/bundle
- git clone https://github.com/vim-ruby/vim-ruby.git
- add the following to .vimrc
  set nocompatible      " We're running Vim, not Vi! (default setting)
  syntax on             " Enable syntax highlighting
  filetype on           " Enable filetype detection
  filetype indent on    " Enable filetype-specific indenting
  filetype plugin on    " Enable filetype-specific plugins
- the previous three lines can be written as
  filetype indent plugin on

Search and Replace
  :set incsearch - move to search matches while typing
  :set hlsearch - highlight all matches after pressing Enter
  :set ic - case-insensitive searches
  :set noic - case-sensitive searches
  /{pattern} - search forward for next occurrence, cursor placed at match start
  /{pattern}/e - same as previous, but cursor placed at match end
  ?{pattern} - search backward for previous occurence
  * - search forward for next occurence of word under cursor
  # - search backward for previous occurence of word under cursor
  :noh[lsearch] - turn off highlighting of matches from last search
  n - repeat last search (use ctrl-n in insert mode?)
  N - repeat last search in opposite direction (use ctrl-p in insert mode?)
  * - search forward for next occurrence of word under cursor
  # - search backward for next occurrence of word under cursor
  :%s/{pattern}/{string} - replace first occurrence of {pattern} with {string}
  :%s/{pattern}/{string}/g  - all occurrences 
  :%s/{pattern}/{string}/gc - all occurences with confirmation prompts
  :%s/\t/  /g - replace all tabs with two spaces
  :set ff=unix - removes Windows carriage returns from all lines
  :%s/ctrl-vctrl-m$//g - also removes Windows carriage returns from all lines
                         and is sometimes needed instead of the previous
  :%s/ctrl-vctrl-m/ctrl-vctrl-m/g - replaces Windows carriage with Unix ones
  :.,$s/{pattern}/{string}/g - all occurrences from the cursor to end of file

Select
  v - begin visual selection in char mode;
      now move cursor to end of selection;
      includes char under cursor;
      Under Windows, hold down shift key while moving cursor.
      To avoid this, change "behave mswin" to "behave xterm" in _vimrc.
  V - begin visual selection in line mode
  ctrl-V - begin visual selection in block mode
  o - changes end of selection being moved

Shell commands
- see Conque at http://code.google.com/p/conque/
- may need to install newer version of python (works with 3.2.1)
- download and unzip into .vim/bundle directory
- to run a bash shell in the current Vim buffer, :ConqueTerm bash
- other examples
  :ConqueTermSplit mysql -h localhost -u joe -p sock_collection
  :ConqueTermTab bash
  :ConqueTermVSplit bash
- when running Vim from a terminal window,
  can press ctrl-z to put Vim in the background
  and enter fg to return to Vim in the foreground

Silver Searcher, The
- configuring to be used by grep, lgrep, and ctrlp plugin
  if executable('ag')
    " Use ag instead of grep.
    set grepprg=ag\ --nogroup\ --nocolor\ --column
    set grepformat=%f:%l:%c:\ %m

    " Use ag in CtrlP for listing files.
    " It is lightning fast and respects .gitignore.
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

    " ag is fast enough that CtrlP doesn't need to cache.
    let g:ctrlp_use_caching = 0
  endif

Slime and Screen
- to install vim-slime
  * install Pathogen if not already done
  * cd ~/.vim/bundle
  * git clone git://github.com/jpalardy/vim-slime.git
  * restart Vim?
- on a Mac, screen is already installed
- to use
  * open a Terminal window
  * enter "screen -S {session-name}" to start a screen session (ex. name is node)
  * start Vim
  * open a file
  * position the cursor in a block of lines (forward and backward to a blank line)
    or select the lines to be copied
  * press ctrl-c ctrl-c to copy it to a screen session
  * the first time this is done, slime will prompt for a screen session name
    - enter a name (like "node")
    - press return a second time to accept the screen window name of "0"
  * the code will be copied to the screen session
- common use case
  * start a REPL in the screen session (such as node)
  * open a JavaScript file in Vim
  * position the cursor in a function definition
  * press ctrl-c ctrl-c to copy the function definition into the REPL
  * test the function by enter a call to it in the REPL

Snippets
- to install
  * cd ~/.vim/bundle
  * git clone https://github.com/tomtom/tlib_vim.git
  * git clone https://github.com/MarcWeber/vim-addon-mw-utils.git
  * git clone https://github.com/garbas/vim-snipmate.git
  * git clone https://github.com/honza/vim-snippets
  * cd vim-snipmate
- to use
  * enter a snippet name in insert mode and press tab key to expand
  * won't work if tab key has been mapped to do something else!
  * press tab to advance to next placeholder in snippet if there is one
- to modify and add snippets
  * edit the .snippet files in bundles/vim-snippets/snippets
    - for example, javascript.snippets
  * indentation in snippets must be done with tabs, not spaces
    - depending on other Vim configuration,
      tabs can expand to spaces when a snippet is used
- Drew Neil recommends a different plugin for snippets ... what is it?

Spell check
- to start, enter
  :setlocal spell spelllang=en_us
  * you have <leader>s mapped to toggle this in normal and insert modes
- to jump to the next error, ]s
- to get a list of suggested replacements, z=
  * enter number of replacement and press <cr>
    or just press <cr> to make no change
- to repeat the replacement made by z= throughout the document, :spellr
- to add word under cursor to list of good words, zg
  * adds to ~/.vim/spell/en.utf-8.add
- for more see http://vimdoc.sourceforge.net/htmldoc/spell.html

Tab Pages
- to open a new, empty tab, :tabe
- to close the current tab, :tabc
- to close all other tabs, :tabo
- to open a file in a new tab, 
  ???
- to navigate to a different tab,
  click the tab with the mouse
  or type "gt" for goto tab
  or press ctrl-PgDn or ctrl-PgUp
- to have tabs always show even when there is only one window,
  add the following to _vimrc
  set showtabline=2
- to use a tab to edit a file opened using "Edit with Vim"
  from the Windows Explorer context-sensitive menu,
  add " -p" to the Windows registry under
  HKEY_LOCAL_MACHINE\SOFTWARE\Vim\Gvim\path using regedit

Tags
- to install Exuberant Ctags on Mac OS X, brew install ctags
  * understands 41 language syntaxes including
    C, C++, C#, HTML, Java, JavaScript, Lisp, Lua, Perl, Python,
    Ruby, shell scripts, and VimScript
    - not CSS
- to generate a "tags" file for the current directory and all subdirectories,
  enter "ctags -R"
  * works for 41 languages!
- helping Vim locate "tags" file
  * by default, will look in directory where Vim was started
  * can add other directories with :set tags={path-list},
    but it's easiest to just start in the right directory
- to visit a tag in Vim, do one of the following:
  1) :ta[g] {tag}
     * visits highest priority (closest) match
  2) position cursor over tag-string and press ctrl-]
     * visits highest priority (closest) match
     * This is the default telnet escape character.
       To avoid escaping to a telnet prompt,
       include the -E option when starting telnet to disable escaping.
  3) if there might be more than one match, press g-ctrl-]
     to get a menu of matches to pick from
- maintains a history of visited tags (stack)
- to return to the previous location, press ctrl-t
- to start vim and immediately visit a given tag,
  vim -t {tag}
- when there is more than one match,
  vim displays all matches and allows one to be selected by number.
- for more info, enter ":help tags" in vim

Tools that use vi
- to cause tools that launch vi (such as cleartool edcs)
  to launch vim instead, set the VISUAL environment variable to "vim"

Unicode
- to find the code for the character under the cursor, press ga
  * the decimal, hex and octal values will be
    displayed in the status line
- to find a unicode character by its code,
  f/\%d{decimal-value}
- To substitute all occurences of a unicode character
  with another character,
  s/\%d{decimal-value}/{new-char}/g

Unimpaired Plugin
- https://github.com/tpope/vim-unimpaired
- provides 20 key mappings in four categories
- for a full list, :h unimpaired
- all take a count
- highlights
  * files
    - ]f and [f open next and previous file in
      directory of current file in alphabetical order
  * buffers
    - ]b, [b, ]B, and [B for bnext, bprevious, blast, and bfirst
  * quickfix list
    - first need to run a command that populates the quickfix list 
    - ]q, [q, ]Q, and [Q for cnext, cprevious, clast, and cfirst
    - ]ctrl-q and [ctrl-q for cnfile, cpfile
      * must disable control flow in terminal with stty -ixon
  * location list
    - ]l, [l, ]L, and [L for lnext, lprevious, llast, and lfirst
    - ]ctrl-l and [ctrl-l for lnfile, lpfile
  * argument list
    - ]a, [a, ]A, and [A for next, previous, last, and first
  * ctags
    - first need to navigate to a definition with ctrl-]
    - ]t, [t, ]T, and [T for tnext, tprevious, tlast, and tfirst

vimgrep (also see grep)
- searches files in and below current directory (slow!)
- doesn't use an external shell command
- :vim[grep] {pattern} {files}
  * pattern can be a regex surrounded by /'s
  * files can use * wildcard to match zero or more characters
  * files can use ** to recursively search subdirectories
  * populates quickfix list
    - use :lvim[grep] to populate location list instead
    - can use unimpaired plugin key mappings to navigate
  * ex. vim parseInt **/*.js
  * first matching file is opened
    - based on file type, that could trigger another command that
      creates a new quickfix list (such as jshint)
      * best way to avoid this issue is probably to use lvimgrep instead
        which populates a location list instead of the quickfix list
      * to stop jshint from running on each .js file when it is opened,
        add this to .vimrc:
        let JSHintUpdateWriteOnly = 1
      * to toggle use of jshint, run :JSHintToggle
        - only a known command after first .js file is opened
    - to return to the quickfix list created by vimgrep, :colder
    - to avoid opening first matching file,
      use vimgrep! instead of vimgrep

Windows
  :win {width} {height} - to set default window size (put in .vimrc)
  :sp[lit] [{name}]  - horizontal split screen into two windows
                       and optional open file {name}
  ctrl-w s           - same as :split
  :vs[plit] [{name}] - vertical split screen
  ctrl-w v           - same as :vsplit
  :new               - split screen and start new file
  ctrl-w n           - same as :new
  ctrl-w {h|j|k|l}   - move to window in direction of key
  ctrl-w {H|J|K|L}   - swap windows in direction of key
  ctrl-w down-arrow  - move to window below
  ctrl-w up-arrow    - move to window above
  ctrl-w _           - maximize height of current window
  ctrl-w |           - maximize width of current window
  ctrl-w ctrl-w      - move to next window
  :clo[se]           - close current window (doesn't delete buffer)
  :clo[se]!          - close current window and discard changes
  ctrl-w c           - same as :close
  :on[ly]            - close all windows but current one
  ctrl-w o           - same as :only
  ctrl-w =           - make split windows equal width or height
  {n}ctrl-w <        - decrease window width by {n}
  {n}ctrl-w >        - increase window width by {n}
  {n}ctrl-w +        - increase height by {n}
  {n}ctrl-w -        - decrease height by {n}
  ctrl-w =           - make all windows the same size
  ctrl-w r           - rotate windows

Working Directory
- to see, :pwd
- to change, :cd {path}
  * :cd .. to go up to parent directory
  * :cd - to return to previousl working directory
  * enter :cd and press tab key to cycle through subdirectory names
- affects filename completion

YouCompleteMe and TernJS
- YouCompleteMe is a fuzzy-search code completion engine for Vim.
  * see https://github.com/Valloric/YouCompleteMe
- Tern for Vim provides Tern-based JavaScript editing support in Vim.
- Tern is a code-analysis engine for JavaScript.
  * see http://ternjs.net
  * commands include TernDef (ctrl-o to return to previous location),
    TernDefPreview, TernDefSplit, TernDefTab, TernDoc,
    TernDocBrowse, TernType, TernRefs, and TernRename
  * for help on Tern, :h Tern
- to install YouCompleteMe
  * cd .vim/bundle
  * git clone https://github.com/Valloric/YouCompleteMe.git
  * cd YouCompleteMe
  * git submodule update --init --recursive
  * install CMake
    - on Mac OS X, brew install cmake
    - in Cygwin, isntall through setup-x86.exe
  * ./install.sh --clang-completer
    - this failed in Cygwin!
- to install Tern for Vim
  * cd .vim/bundle
  * git clone https://github.com/marijnh/tern_for_vim.git
  * cd tern_for_vim
  * npm install
- provides autocompletion while typing
  * to accept first option, press tab and just keep typing
  * press tab more times to cycle through other options
- Does the use of the tab key in YouCompleteMe conflict with SnipMate?

Other
  :help [topic] - get help
    To navigate to topics surrounded by vertical bars
    put cursor on topic and press ctrl-]
  ~          - change case of char under cursor or every character selected
  J          - join current line with next line
  u          - undo last change
  ctrl-r     - redo last undo
  ctrl-l     - refreshes display (useful if it gets scrambled)
  .          - repeat last non-colon command
  :hardcopy  - sends to printer
  :set nu    - displays line numbers
  :set nonu  - undisplays line numbers
  :set et    - future tabs are expanded to spaces
  :retab     - expands all tabs currently in file to spaces
               if the previous option is set
  :!{os-cmd} - executes an OS command from within vi (ex. :!ls)
  :so[urce] {file} - executes a file containing Ex commands such as _vimrc
  :set wm=5  - sets the wrap margin so that text automatically wraps
               as it is entered when it is less then 5 characters
               for the right edge of the window
               To disable, set textwidth to zero with ":set tw=0".
  :make      - runs Makefile in current directory
  gd         - go to definition of method or variable under cursor
  K          - go to man page for wod under cursor
  ctrl-g     - display name of file being edited, # of lines, % thru
  %          - find matching {}, () or []
  To avoid line wrap
    :set nowrap textwidth=0 wrapmargin=0
  To wrap lines at the window edge
    :set wrap nolinebreak textwidth=0 wrapmargin=0
  To break lines with hard line breaks and make them <= 80
    :set textwidth=80
  To send a buffer to a shell command
    :w !{command}
    For example, to execute Ruby code in a buffer, :w !ruby
    Can map the following to a key to save all open files
    and run the current buffer.
    :wall<CR>:!ruby %<CR>

Notes from Bill Odom's talk on 2/16/12

Google "recommended vim plugins for javascript coding"
#1 JavaScript indenter - by Preston Koprivica
#2 Vastly improved javascript indentation - by Darrick Wiebe
default syntax highlighting for JavaScript just uses highlighting for C?
JSLint - see link from crypticswarm blog to Jonathan Palardy page
JSHint - manalang jshint.vim - is this what you are using?
Conque - a shell that runs in Vim
see "Resources" slides in his deck
Bufexplorer
Taglist - works with exuberant-ctags; runs it for you
DoctorJS - from Mozilla; tags JavaScript source files
Yehuda Katz article "Everyone Who Tried to Convice Me to use Vim was Wrong"
- Bill doesn't like his recommended list of plugins for newbies
See Steven Pritchard's minimal Vim environment
http://vimcasts.org/ - a book is in the works
