ETag Notes

An ETag is an HTTP header that is used to identify a version of a resource.
One use is to avoid the problem where current updates to a resource
overwrite each other.

In Node.js, the Express server automatically
sets the ETag header in responses.
It is computed based on the response body
using the npm package "etag" from Doug Wilson.
However, when CORS is being used, clients cannot access this header
unless it is explicitly enabled in both the client and the server.

To enable use of the ETag header in the client,
set the request header "Access-Control-Allow-Headers" to "ETag".
This is typically specified in the headers property
of the options object that is passed to the fetch function.

To enable use of the ETag header in the server,
set the response header "Access-Control-Expose-Headers" to "ETag".
This is typically done by calling the set method
on the Express Response object.  For example,
res.set('Access-Control-Expose-Headers', 'ETag');

By default Express uses "weak" ETags.
From MDN,
"Weak validators are easy to generate
but are far less useful for comparisons.
Strong validators are ideal for comparisons
but can be very difficult to generate efficiently."

To use strong ETags in Express,
app.set('etag', 'strong');

It can be useful to generate custom ETag values,
especially when the set of properties that
describe the same resource differ between requests.

To generate custom ETag values in Express,

const etag = require('etag');

app.set('etag', buffer => {
  // Examine the buffer.  This might include converting it
  // to a string and then a JavaScript object like this:
  try {
    const obj = JSON.parse(buffer.toString());
    // Compute an ETag value based on some of the object properties.
    return someETagValue;
  } catch (e) {
    return etag(buffer); // default ETag calculation
  }
});

If an ETag header is explicitly set,
the default computaion to add one is skipped.

A client can specify that a PUT or PATCH should not proceed
if the client had an old version of the resource by
specifying an If-Match header set to the last ETag value known to them.
The server code must fetch the current version of the resource,
compute its ETag value, and compare it to the value in the If-Match header.
If they do not match, the server should return a 409 CONFLICT status.

An easy way to compute ETag values for a resource is to just
use an incrementing version number starting from zero or one.
