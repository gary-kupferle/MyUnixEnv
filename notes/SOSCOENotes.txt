SOSCOE Notes

TDD Editor Setup
- cd /vobs/fcsc_tinServices
- ./SetTIN.sh
- cd scripts
- ./tddeditor.sh

COTS Software
- stored under /opt/fcs/service/soscoe-cots

Credentials
- To determine if someone has credentials on a given Linux box
  * login to the box
  * run "/usr/local/sbin/soscoe_creds -l"
  * look for their user id in the list
- To get credentials on a specific Linux box
  - email request to Dave Wright and cc Rick Hein
- To convert credentials
  /vobs/fcsc_informationAssurance/scripts/convertCredential

DB2
- To verify that DB2 is working
  * enter "db2" at a shell prompt
  * enter "connect to dataStor"
  * verify connection information is output with no error messages
  * quit

Key Agent
- to determine if a key agent is running for a given user
  ps -ef | grep scKeyAgent | grep {user-id}
- to start a key agent
  * new way: ssh -X elcamino (starts the scKeyAgent magically)
  * old way: su - bvj519 (starts the scKeyAgent magically)
  * for the SOSCOE passphrase, enter bvj519
  * for the password, enter yours
  * ct setview {view-name}
- if this doesn't work, try resetting your private key password
  by running ~/private-key-password-set
  * enter your normal password for PEM pass phrase

Linux boxes to use
- consider these:
  avalon, barracuda, chevelle, corvette, elcamino, gto, malibu, mustang

To determine the version of FCS Studio on a Linux box
- telnet to the box
- cat /etc/motd | grep Studio
- want 1.3 or higher
- to see the version of CentOS, run "cat /etc/issue"

Creating a new ClearCase view
- cd /soscoe/ccase/scripts
- run ./make_view.pl
- for the block point, enter 7 for soscoe2.0
- enter PCR name (ex. pcr23754)
- for the build label, enter 1 for UPPS_PHI
- for the VOB, enter 107 (can change) for /vobs/fcsc_userPolicyProfile
- a view with a name containing your user id, the block point,
  and the PCR name will be created (ex. bvj519_soscoe2.0_pcr23574)

Using a particular view
- ct setview {view-name}
- your alias "sv {view-suffix}" does this

Building SOSCOE
  telnet barracuda (so that the correct version of FCS Studio is available)
  sv {view-suffix}
  cd ~
  mkall

Discovery server
- Whenever it is restarted, there is cleanup that must be done.
  The following are notes from Phyllis White on how to do this.
# I always run Discovery out of a dir I've created in /tmp.
# This script cleans that up and re-creates it.
# It cleans up other stuff as well.
rm -rf /tmp/whitepa

rm -rf /tmp/Sh*
rm -f /dev/shm/*
                  
# Needing to clean up semaphores and shared mem is really really old -- I doubt that it's nec, but....
for x in `ipcs -s | cut -f2 -d" " | grep -v Semaphore`
do
ipcrm -s $x
done
for x in `ipcs -m | cut -f2 -d" " | grep -v Share`
do
ipcrm -m $x
done
# Logging gets messed up if you re-use a log file name w/o removing this index.
# That was important when I worked on TINS.  Don't know about Policy -- I just always do it.
rm /tmp/ScLogIndex.log
 
rm -rf /tmp/AF_UNIX/*
mkdir /tmp/whitepa
cd /tmp/whitepa
# there was something we used to comment out of this file.  don't know whether it's nec.
# try commenting it out and see what happens.
# if you have problems, let me know and I'll let you know what I commented out from the file in comms.
cp ~/ScJxtaTransportConfig.xml .

# this is a capture of the file generated when I started up Discovery earlier.  Saves having to answer
# all the silly questions.
cp ~/PlatformConfig .
# and run Discovery
DiscoveryServer clean -n

Running Policy Tests
- build code
    sv
    cd /vobs/fcsc_userProfilePolicy
    make EDITION=se DEBUG=1 TEST=1
- see your servers3 and servers2 scripts that
  automate starting the following servers
  * these require running in "TightVNC Viewer"
- start Discovery server in its own xterm
    sv
    cd ~
    ./startDiscovery
    This script should continue running and output
    "operational" when it is ready.
- start policy engine server int its own xterm 
    sv
    cd ~
    ./startPolicy
- note that the folowing tests are listed
  in the order in which Binu runs them
- start distributed policy server xterm
    sv
    cd ~
    ./startDistPolicy
- run distributed policy C++ test
    sv
    cd ~
    ./distPolicyCppTest > test.out 2>&1
- run policy C++ test
    sv
    cd ~
    ./policyCppTest > test.out 2>&1
- run policy Java tests
    sv
    cd ~
    ./policyJavaTest > test.out 2>&1
- run confidence test
    sv
    cd ~
    ./confidenceTest > test.out 2>&1

Status values
- most status values are stored in variables of type ScStatus
- to find the definition of a particular value
  * run your script "getstatus {decimal-value}" or do the following
  * convert it to hex (can use Mac dashboard HexCalculator)
  * cd to /vobs/fcsc_{some-service-family} such as userProfilePolicy
  * find . -name '*Status.h' | xargs grep {hex-value}

Copying header files to i686 directories
- cd /vobs/fcsc_common
- make EDITION=se fcsc_userProfilePolicy-includes

Running code generator for fcsc_communication
- cd /vobs/fcsc_userProfilePolicy/src/java/src/sc/policyservice/distpolicy
- see the Java source files listed after "cpGenFileIn::" in Makefile
- checkout each of those files from ClearCase
- run "make EDITION=se COMMGEN=1"
- this should overwrite the checked out files with new versions
- checkin each of the files

Running XML-related tests
- ~/buildUPP
- ~/buildXMLTest
- ~/runXMLTest
or
- ~/go to do all three

Releasing a view
- email Dave Oakley the following items
  * PCR number
  * view name
  * config. spec.
  * list of added/modified files generated by running
    /soscoe/ccase/scripts/find_changed_files.pl
  * test results, especially if any failed and PCR will be created for them
  * any special instructions needed to build the code or run the tests
