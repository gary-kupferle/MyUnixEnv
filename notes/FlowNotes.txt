Flow Notes

- overview
  * open-source typechecker for JavaScript from Facebook
  * supports type inference
    - can catch type errors without having to declare
      the types of all variables, parameters, and functions
      * TypeScript isn't as good at this
  * alternative to TypeScript
    - didn't like that because they felt it didn't scale enough (?)
      and it relies on type annotations (?)
    - can it use TypeScript type definition files (.d.ts files)?
      * see repository of these at https://github.com/DefinitelyTyped/DefinitelyTyped
    - TypeScript provides both type checking and transpiling,
      whereas Flow only supports type checking (use Babel for transpiling)
    - Typescript and Flow serve different purposes
      * Typescript: developer productivity and structure
      * Flow: dynamic program analysis
  * most features of ES6 are supported
    - for a list, see https://github.com/facebook/flow/issues/560
  * has a goal of remaining compatible with TypeScript syntax
  * Babel generates ES5 files with type annotations removed
  * integrates with React and JSX
  * can tell it to ignore certain requires/imports?
- to install (lots of options)
  * download from http://flowtype.org/
  * npm install -g flow-bin
  * for Mac, brew update; brew install flow
  * for Windows, go to http://www.ocamlpro.com/pub/ocpwin/flow-builds/
  * for use in Babel to strip type information
    - npm install babel-plugin-transform-flow-strip-types
    - add this line to .babelrc
      "plugins": ["transform-flow-strip-types"],
- to get help, run "flow --help"
- to get version of flow that is installed, run "flow version"
- to setup for a project
  * cd to project directory
  * run "flow init"
    - creates .flowconfig file
    - configure to ignore files under node_modules directory
      by adding this to [ignore] section
      .*/node_modules
      * why is the "*" needed?
- to enable checking in a file
  * add comment // @flow or /* @flow */ at top
- to run
  * run "flow" to start the flow server (optional)
    - a.k.a. "code intelligence server"
    - maintains knowledge about files it has already checked
    - makes it faster to check files because it only checks
      those that have been modified since the last check
    - performs parallel evaulation of multiple files
  * run "flow check" everytime you want to check files again
  * run "flow stop" to stop the flow server (optional)
- to configure ESLint to strip type annotations before linting
  * npm install -g eslint-plugin-flowtype
    - from https://github.com/gcazaciuc/eslint-plugin-flowtype
  * modify .eslintrc (perhaps one in home directory) to include
    plugins: ["flowtype"]

- catches attempts to reference properties on null references
- varadics
  * arguments beyond those declared are not considered errors
    ex. add(1, 2, 'foo') when add is declared to take two numbers
  * passing fewer than the number of required parameters
    (names not followed by ?) is an error

- types
  * see details at http://flowtype.org/docs/quick-reference.html
  * specific values (literals): ex. true, 7, 'foo'
  * void: type of functions that don't return anything
  * primitives: boolean, number, string
  * wrappers: Boolean, Number, String
  * enums: coming in the future
  * objects:
    - Object - can have any properties
    - class: Class<T>
      * type of objects allowed
      * can be a built-in or custom class (constructor function name)
      * ex. Date
    - object signature
      * list of required properties and their types
      * can have additional properties
      * follow names of optional properties with ?
      * ex.
        type Person = {name: string, birthday: Date, spouse?: Person};
        const tami: Person = {
          name: 'Tami',
          birthday: new Date(1961, 8, 9),
          height: 65
        };
        const mark: Person = {
          name: 'Mark',
          birthday: new Date(1961, 3, 16),
          height: 74,
          spouse: tami
        };
  * arrays: Array<element-type>
    - tuples: arrays where elements at specific indexes have specific types
    - can nest these
      * ex. Array<Array<number>>
  * functions
    - syntax: (p1: t1, ... pn: tn) => returnType
      * note => instead of :
    - ex. type MyFn = (foo: number, bar: boolean, baz: string) => string;
    - add ? after names of optional parameters
    - polymorphic functions (parametric types)
      * ex. type MyFn = <T>(p1: T, p2: T): T;
  - open methods
    * when functions that use "this" are called on an object (obj.fn()),
      the types of properties on "this" are typechecked
  * prototypes
  * generics
  * nullable types
  * unions: multiple allowed types separated by |
    - ex. string | Array<string>
  * intersection types?
  * any - tells Flow not be perform type checking on the value
  * mixed - can be any type, but can't perform operations on value
    without "refining" the type
  * all types are non-nullable by default
    - to allow null, make type optional (see below)

- to denote the type of a parameter whose value can be null or undefined,
  precede the type with ?
  * ex. foo: ?Object

- to define type aliases
  * type SomeTypeName some-type
  * ex.
    type ArrayOfArraysOfNumbers = Array<Array<number>>;
    function flatten(arr: ArrayOfArraysOfNumbers) { ... }

- types for all built-in JavaScript constants, functions, objects, and classes
  are defined in core.js which is included by default
  * see https://github.com/facebook/flow/blob/master/lib/core.js

- look into declarations at http://flowtype.org/docs/declarations.html#_

- future plans
  * support for converting existing TypeScript declaration files (.d.ts)
    for common libraries on DefinitelyTyped.org to Flow declarations
    - see https://github.com/ptmt/flow-declarations
    - see https://github.com/facebook/flow/issues/7
  * TypeScript catalogs interface definitions for many JavaScript libraries
    at DefinitelyTyped
    - http://definitelytyped.org/
  * enum types

- questions
  * Is there an "interface" keyword in Flow? If so, what does it do?
  * Is there a "mixin" keyword in Flow? If so, what does it do?
