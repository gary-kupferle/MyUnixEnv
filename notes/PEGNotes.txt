PEG.js Notes

- stands for "Parsing Expression Grammar"
- a parser generator for JavaScript
- http://pegjs.majda.cz/
- to install
  npm install -g pegjs
- to generate parser code
  pegjs {name}.peg
  * generates {name}.js which defines a Node.js module
- to use generated code
  var parser = require({path-to-code});
  var result = parser.parse({text});
- grammar files can include comments using JavaScript syntax
  * // for single line
  * /* ... */ for multi-line
- rules syntax
  * name = expression
- each expression can be
  * another rule name
  * a literal in quotes (single or double)
  * a character range in square brackets (ex. [a-f])
- expression repetition
  * follow expression with ? (optional), * (zero or more) or + (one or more)
- overriding output
  * follow expression with JavaScript code in curly braces
  * return value to be output
- alternatives
  * name = expr1 / expr2 / expr3
  * if there is more than one way to match an expression,
    the first match is selected
  * The use of "/" comes from the original definition of PEGs by Bryan Ford.
    This is to distinguish the ordered choice of "/"
    from the ordinary alternation of "|" used in context-free grammars.
- left-recursive rules are not allowed
  * because it would lead to an infinite loop
    in the code generated by this parser
  * means an expression cannot begin with a reference
    to the name the rule in which it appears
- arithmetic precedence example:
  start = additive
  additive =
    left:multiplicative "+" right:additive {
      return {tag: "+", left:left, right:right};
    }
    /
    multiplicative
  multiplicative =
    left:primary "*" right:multiplicative {
      return {tag: "*", left:left, right:right};
    }
    /
    primary
  primary =
    integer
    /
    "(" additive:additive ")" {
      return additive;
    }
  integer =
    digits:[0-9]+ {
      return parseInt(digits.join(""), 10);
    }
